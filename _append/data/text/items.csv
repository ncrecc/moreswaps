Name,Description,Requirements,Script
Delude,Inflict [vanish]1 vanish,,if(getstatus(~ncr_vanishall~) < 1 && getstatus(VANISH) < 1 && getstatus(~ncr_vanishlegacy~) < 1) { inflict(~ncr_vanish~); inflict(~ncr_internalvanish~); var dovanish = new elements.Skill(~Vanishthing~); dovanish.execute(self|target); } else { self.textparticle(~No effect!~); } sfx(~_vanish~);
Strobe Light,Vanish a random amount,,var r = rand([1|1|1|1|2|2|2|3|3|4|5]); if(getstatus(~ncr_vanishall~) < 1 && getstatus(VANISH) < 1 && getstatus(~ncr_vanishlegacy~) < 1) { inflict(~ncr_vanish~|r); inflict(~ncr_internalvanish~|r); var dovanish = new elements.Skill(~Vanishthing~); dovanish.execute(self|target); } else { self.textparticle(~No effect!~); } sfx(~_vanish~);
Hadoken,Do [vanish]3 damage,,attack(3|VANISH); sfx(~_vanish~); sfxdamage(target|3);
Mass Deception,Inflict [vanish]Vanish ALL[],,inflict(~ncr_vanishall~); inflict(~ncr_internalvanish~|999); var dovanish = new elements.Skill(~Infvanishthing~); dovanish.execute(self|target); sfx(~_vanish~);
Vanishthing,Used internally to handle vanish. Very spaghetti-y and hopefully nobody else ever has to debug this.,,var vanishshitA = ~var t = 0; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHA END*/~; var vanishshitB = ~var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHB END*/~; var vanishthing = ~if(getstatusself(\~ncr_internalvanish\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } /*NCR VANISHC END*/ }~; if(target.getskillcard() != null) { if(target.getskillcard().skills.length > 0) { for(myskill in target.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } var t = 0; var baselist = []; var dicelist = []; if(target.dicepool.length > 0) { for (mydice in target.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(~pushed something~); } trace(dicelist); trace(baselist); } while(getstatus(~ncr_internalvanish~) > 0 && dicelist.length > 0) { dicelist[0].animate(~disappear~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(~vanished something~); trace(getstatus(~ncr_internalvanish~)); if(getstatus(~ncr_internalvanish~) > 0) { removestatus(~ncr_internalvanish~); trace(~removed vanish~); } trace(~----~); } } ; if (target.scriptonstartturn.split(vanishshitA).length <= 1) { target.scriptonstartturn = vanishshitA + target.scriptonstartturn; } if(target.equipment.length > 0) { for(eq in target.equipment) { if(eq.scriptonanyequipmentuse.split(vanishshitB).length <= 1) { eq.scriptonanyequipmentuse = vanishshitB + eq.scriptonanyequipmentuse; } } } while (getstatus(~ncr_vanish~) < getstatus(~ncr_internalvanish~)) { removestatus(~ncr_internalvanish~); } // that bit at the end is an edgecase with alt reduce
Infvanishthing,Used internally to handle vanish.,,var vanishshitA = ~var t = 0; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHA END*/~; var vanishshitB = ~var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHB END*/~; var vanishthing = ~if(getstatusself(\~ncr_internalvanish\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } /*NCR VANISHC END*/ }~; if(target.getskillcard() != null) { if(target.getskillcard().skills.length > 0) { for(myskill in target.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } var t = 0; var baselist = []; var dicelist = []; if(target.dicepool.length > 0) { for (mydice in target.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(~pushed something~); } trace(dicelist); trace(baselist); } while(getstatus(~ncr_internalvanish~) > 0 && dicelist.length > 0) { dicelist[0].animate(~disappear~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(~vanished something~); trace(getstatus(~ncr_internalvanish~)); if(getstatus(~ncr_internalvanish~) > 0) { removestatus(~ncr_internalvanish~); trace(~removed vanish~); } trace(~----~); } } ; if (target.scriptonstartturn.split(vanishshitA).length <= 1) { target.scriptonstartturn = vanishshitA + target.scriptonstartturn; } if(target.equipment.length > 0) { for(eq in target.equipment) { if(eq.scriptonanyequipmentuse.split(vanishshitB).length <= 1) { eq.scriptonanyequipmentuse = vanishshitB + eq.scriptonanyequipmentuse; } } } if (getstatus(~ncr_vanishall~) < 1 && getstatus(~ncr_vanishlegacy~) < 1) { removestatus(~ncr_internalvanish~|ALL); } // that bit at the end is an edgecase with alt reduce
Vanishselfthing,Used internally to handle vanish.,,var vanishshitA = ~var t = 0; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHA END*/~; var vanishshitB = ~var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHB END*/~; var vanishthing = ~if(getstatusself(\~ncr_internalvanish\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } /*NCR VANISHC END*/ }~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } var t = 0; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(~pushed something~); } trace(dicelist); trace(baselist); } while(getstatusself(~ncr_internalvanish~) > 0 && dicelist.length > 0) { dicelist[0].animate(~disappear~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(~vanished something~); trace(getstatusself(~ncr_internalvanish~)); if(getstatusself(~ncr_internalvanish~) > 0) { removestatusself(~ncr_internalvanish~); trace(~removed vanish~); } trace(~----~); } } ; if (self.scriptonstartturn.split(vanishshitA).length <= 1) { self.scriptonstartturn = vanishshitA + self.scriptonstartturn; } if(self.equipment.length > 0) { for(eq in self.equipment) { if(eq.scriptonanyequipmentuse.split(vanishshitB).length <= 1) { eq.scriptonanyequipmentuse = vanishshitB + eq.scriptonanyequipmentuse; } } } while (getstatusself(~ncr_vanish~) < getstatusself(~ncr_internalvanish~)) { removestatusself(~ncr_internalvanish~); } /*<-- edgecase with alt reduce*/
Infvanishselfthing,Used internally to handle vanish.,,var vanishshitA = ~var t = 0; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHA END*/~; var vanishshitB = ~var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } var vanishthing = \~if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\\\~pushed something\\\~); } trace(dicelist); trace(baselist); } while(getstatusself(\\\~ncr_internalvanish\\\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\\\~disappear\\\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\\\~vanished something\\\~); trace(getstatusself(\\\~ncr_internalvanish\\\~)); if(getstatusself(\\\~ncr_internalvanish\\\~) > 0) { removestatusself(\\\~ncr_internalvanish\\\~); trace(\\\~removed vanish\\\~); } trace(\\\~----\\\~); } } /*NCR VANISHC END*/ }\~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } /*NCR VANISHB END*/~; var vanishthing = ~if(getstatusself(\~ncr_internalvanish\~) > 0) { var t = 0.35; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(\~pushed something\~); } trace(dicelist); trace(baselist); } while(getstatusself(\~ncr_internalvanish\~) > 0 && dicelist.length > 0) { dicelist[0].animate(\~disappear\~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(\~vanished something\~); trace(getstatusself(\~ncr_internalvanish\~)); if(getstatusself(\~ncr_internalvanish\~) > 0) { removestatusself(\~ncr_internalvanish\~); trace(\~removed vanish\~); } trace(\~----\~); } } /*NCR VANISHC END*/ }~; if(self.getskillcard() != null) { if(self.getskillcard().skills.length > 0) { for(myskill in self.getskillcard().skills) { if(myskill.script.split(vanishthing).length <= 1) { myskill.script = myskill.script + vanishthing; } } } } var t = 0; var baselist = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if(baselist.indexOf(mydice.basevalue) == -1 ){ baselist.push(mydice.basevalue); } else { dicelist.push(mydice); } trace(~pushed something~); } trace(dicelist); trace(baselist); } while(getstatusself(~ncr_internalvanish~) > 0 && dicelist.length > 0) { dicelist[0].animate(~disappear~|t); t += 0.1; dicelist.shift(); baselist.shift(); trace(~vanished something~); trace(getstatusself(~ncr_internalvanish~)); if(getstatusself(~ncr_internalvanish~) > 0) { removestatusself(~ncr_internalvanish~); trace(~removed vanish~); } trace(~----~); } } ; if (self.scriptonstartturn.split(vanishshitA).length <= 1) { self.scriptonstartturn = vanishshitA + self.scriptonstartturn; } if(self.equipment.length > 0) { for(eq in self.equipment) { if(eq.scriptonanyequipmentuse.split(vanishshitB).length <= 1) { eq.scriptonanyequipmentuse = vanishshitB + eq.scriptonanyequipmentuse; } } } if (getstatusself(~ncr_vanishall~) < 1) { removestatusself(~ncr_internalvanish~|ALL); } // that bit at the end is an edgecase with alt reduce
Electrify,Shock a random amount,,var r = rand([1|1|1|1|2|2|2|3|3|4|5]); inflict(SHOCK| r); sfx(~_shock~);
Confiscate,Lock [lock]1 dice,,inflict(LOCK); sfx(~_lock~);
Obfuscate,Inflict [blind]1 blind,,inflict(BLIND); sfx(~_blind~);
Blinded with Science,Blind a random amount,,var r = rand([1|1|2|2|2|3|3|4|5]); inflict(BLIND| r); sfx(~_blind~); // you could probably do this without r by just putting the rand in place of it; but this is how the official items do it so what-ever -ncr
Remedy,Block drain next turn (once),,for(eq in target.equipment) { if(eq.script.split(~drain(~).length > 1) { eq.script = eq.script.split(~drain(~).join(~/*NCR SPAM HUMBUG*/attack(~); } } target.scriptendturn = ~for(eq in self.equipment) { if(eq.script.split(\~/*NCR SPAM HUMBUG/*attack(\~).length > 1) { eq.script = eq.script.split(\~/*NCR SPAM HUMBUG*/attack(\~).join(\~drain(\~); } }~ + target.scriptendturn; Gadget.changegadget(self| ~Remedy~| ~Broken Gadget~);
Smog,Do [blind]3 damage,,attack(3|BLIND); sfx(~_blind~); sfxdamage(target|3);
See No Evil,Blind all dice,,inflict(BLIND|ALL); sfx(~_blind~);
FRiCC!,Take 2 damage,,attackself(2); sfxdamage(self|2);
